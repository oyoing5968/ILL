#include <iostream>

using namespace std;

class Node{
	private:
		int data;
		Node* link;
	public:
		Node(int value){
			data = value;
			link = nullptr;
		}
		
		Node* get_link(){
			return link;
		}
		
		void set_link(Node* p){
			link = p;
		}
		
		int get_data(){
			return data;
		}
};

class LinkedList{
	private:
		Node* head;
	public:
		LinkedList(){
			head = nullptr;
		}
		
		bool empty(){
			return head == nullptr; 
		}
		
		void insert(int value){
			Node* newNode = new Node(value);
			if(empty() || value > head->get_data()){
				newNode->set_link(head);
				head = newNode;
			}
			else {
				Node* current = head;
				while(current->get_link() != nullptr && current->get_link()->get_data() >= value){
					current = current->get_link();
				}
				newNode->set_link(current->get_link());
				current->set_link(newNode);
			}
		}
		
		
		void display(){
			Node* current = head;
			while (current != nullptr){
				cout << current->get_data();
				if (current->get_link() != nullptr){
					cout <<" ";
				}
				current = current->get_link();
			}
			cout << endl;
		}
		
		~LinkedList(){
			Node* current = head;
			while (current != nullptr){
				Node* box = current;
				current = current->get_link();
				delete box;
			}
		}
};

int main(){
	int n, value;
	cin >> n;
	
	LinkedList list;
	
	for(int i = 0; i<n; i++){
		cin >> value;
		list.insert(value);
		list.display();
	}
	return 0;
}
