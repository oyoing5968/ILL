#include <iostream>
#include <vector>
#include <string>
#include <sstream>
#include <iomanip>
#include <stdexcept> //환경에 따라 다름

using namespace std;

class Stack {
private:
    static const int Max_Size = 100;
    int top;
    string data[Max_Size];
public:
	Stack(){
		top = -1;
	}
	void push(const string& word){
		if (top < Max_Size - 1){
			data[++top] = word;
		}
	}
	void pop(string& out){
		if(top ==-1){
			out = "0";
		} 
		else out = data[top--];
	}
};

double calc_postfix(const vector<string>& expr) {
    double result = 0.0;
    Stack st;

    for (const string& arr : expr) {
        if (arr != "+" && arr != "-" && arr != "*" && arr != "/") {
            st.push(arr);
        }
        else {
        	string second_str, first_str;
			st.pop(second_str);
			st.pop(first_str);

            double second = stod(second_str);
            double first = stod(first_str);

            if (arr == "+") result = first + second;
            else if (arr == "-") result = first - second;
            else if (arr == "*") result = first * second;
            else if (arr == "/") {
                if (second == 0.0) {
                    throw runtime_error("zero division error");
                }
                result = first / second;
            }
            st.push(to_string(result));
        }
    }
    return result;
}

int main() {
    vector<string> expr;
    string line, token;

    getline(cin, line);
    stringstream ss(line);
    
    // tokenize the given line and sequentially store each of them in the vector `expr`
    while (getline(ss, token, ' '))
        expr.push_back(token);

    try {
        cout << fixed << setprecision(2);
        cout << calc_postfix(expr) << endl;
    }
    catch (const std::runtime_error& error) {
        cout << error.what() << endl;
    }

    return 0;
}
