#include <iostream>
#include <string>
using namespace std;

class BinaryNode {
private:
    int data;
    BinaryNode* left;
    BinaryNode* right;

public:
    BinaryNode(int data = 0, BinaryNode* left = nullptr, BinaryNode* right = nullptr) {
        this->data = data;
        this->left = left;
        this->right = right;
    }

    int getData() { return data; }
    BinaryNode* getLeft() { return left; }
    BinaryNode* getRight() { return right; }
    void setData(int d) { data = d; }
    void setLeft(BinaryNode* node) { left = node; }
    void setRight(BinaryNode* node) { right = node; }
};

class BinarySearchTree {
private:
    BinaryNode* root;

    BinaryNode* insert(BinaryNode* node, int key) {
        if (!node) return new BinaryNode(key);
        if (key < node->getData())
            node->setLeft(insert(node->getLeft(), key));
        else if (key > node->getData())
            node->setRight(insert(node->getRight(), key));
        return node;
    }

    BinaryNode* findMin(BinaryNode* node) {
        while (node->getLeft()) node = node->getLeft();
        return node;
    }

    BinaryNode* remove(BinaryNode* node, int key) {
        if (!node) return nullptr;

        if (key < node->getData()) {
            node->setLeft(remove(node->getLeft(), key));
        } else if (key > node->getData()) {
            node->setRight(remove(node->getRight(), key));
        } else {
            if (!node->getLeft() && !node->getRight()) {
                delete node;
                return nullptr;
            } else if (!node->getLeft()) {
                BinaryNode* temp = node->getRight();
                delete node;
                return temp;
            } else if (!node->getRight()) {
                BinaryNode* temp = node->getLeft();
                delete node;
                return temp;
            } else {
                BinaryNode* succ = findMin(node->getRight());
                node->setData(succ->getData());
                node->setRight(remove(node->getRight(), succ->getData()));
            }
        }

        return node;
    }

    void countPaths(BinaryNode* node, int target, int currentSum, int& count) {
        if (!node) return;

        currentSum += node->getData();
        if (currentSum == target) count++;

        countPaths(node->getLeft(), target, currentSum, count);
        countPaths(node->getRight(), target, currentSum, count);
    }

public:
    BinarySearchTree() : root(nullptr) {}

    void insert(int key) { root = insert(root, key); }
    void remove(int key) { root = remove(root, key); }

    int countPathsWithSum(int target) {
        int count = 0;
        countPaths(root, target, 0, count);
        return count;
    }
};

int main() {
    int n, x;
    cin >> n >> x;

    BinarySearchTree bst;

    for (int i = 0; i < n; ++i) {
        string cmd;
        int key;
        cin >> cmd >> key;
        if (cmd == "insert") bst.insert(key);
        else if (cmd == "remove") bst.remove(key);
    }

    cout << bst.countPathsWithSum(x) << endl;
    return 0;
}
